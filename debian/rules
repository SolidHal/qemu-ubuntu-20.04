#!/usr/bin/make -f
SHELL = /bin/sh -e

# in order to keep output non-intermixed together, disable parallel building
# of different targets in this d/rules but allow running parallel submakes
.NOTPARALLEL:

# get DEB_VERSION
include /usr/share/dpkg/pkg-info.mk
# get DEB_HOST_ARCH DEB_HOST_ARCH_OS DEB_HOST_GNU_TYPE DEB_HOST_MULTIARCH DEB_BUILD_GNU_TYPE
include /usr/share/dpkg/architecture.mk
# get CFLAGS LDFLAGS etc
include /usr/share/dpkg/buildflags.mk

libdir = /usr/lib/${DEB_HOST_MULTIARCH}

ifeq ($(shell dpkg-vendor --derives-from Ubuntu && echo yes),yes)
VENDOR := UBUNTU
DEB_BUILD_PARALLEL = yes
else
VENDOR := DEBIAN
endif

AUTOGENERATED:= qemu-block-extra.prerm qemu-block-extra.postrm qemu-system-gui.prerm qemu-system-gui.postrm
PKGVERSION := $(shell printf "Debian ${DEB_VERSION}" | tr --complement '[:alnum:]+-.~' '_')

# support parallel build using DEB_BUILD_OPTIONS=parallel=N
ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
  MAKEFLAGS += -j$(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
endif

# verbose build
V ?= 1

# list of packages we're supposed to build
BUILD_PACKAGES = $(call dpkg_late_eval,BUILD_PACKAGES,dh_listpackages)

enable_system = $(if $(filter qemu-system,${BUILD_PACKAGES}),enable,disable)
enable_linux_user = $(if $(filter qemu-user,${BUILD_PACKAGES}),enable,disable)

FIRMWAREPATH = /usr/share/qemu:/usr/share/seabios:/usr/lib/ipxe/qemu
sysdatadir = debian/qemu-system-data/usr/share/qemu

ALPHAEV67_CROSSPFX = alpha-linux-gnu-
PPC64_CROSSPFX = powerpc64-linux-gnu-

# we add another set of configure options from debian/control
common_configure_opts = \
	--with-pkgversion="Debian $(DEB_VERSION)" \
	--extra-cflags="$(CFLAGS) $(CPPFLAGS)" --extra-ldflags="$(LDFLAGS) -Wl,--as-needed" \
	--prefix=/usr \
	--sysconfdir=/etc \
	--libdir=${libdir} \
	--libexecdir=/usr/lib/qemu \
	--firmwarepath=${FIRMWAREPATH} \
	--localstatedir=/var \
	--disable-blobs \
	--disable-strip \
	--interp-prefix=/etc/qemu-binfmt/%M \
	--localstatedir=/var \

# Cross compiling support
ifneq ($(DEB_BUILD_GNU_TYPE), $(DEB_HOST_GNU_TYPE))
common_configure_opts  += --cross-prefix=$(DEB_HOST_GNU_TYPE)-
endif

ifeq ($(DEB_TARGET_ARCH), hppa)
# allow configure to run on unsupported arches to build qemu-utils and the like
common_configure_opts += --enable-tcg-interpreter
endif

ifeq (${enable_system},enable)

# list of system (softmmu) targets, from ./configure
system_targets = \
 i386 x86_64 alpha aarch64 arm cris lm32 hppa m68k microblaze microblazeel \
 mips mipsel mips64 mips64el moxie nios2 or1k ppc ppc64 riscv32 riscv64 rx \
 sh4 sh4eb sparc sparc64 s390x tricore xtensa xtensaeb unicore32

# qemu-system subpackages, from d/control
ifeq ($(VENDOR),UBUNTU)
sys_systems = arm mips ppc sparc x86 s390x
else
sys_systems = arm mips ppc sparc x86
endif
systems = ${sys_systems} misc
sysarch_arm   = $(filter aarch64 arm,${system_targets})
sysarch_mips  = $(filter mips mipsel mips64 mips64el,${system_targets})
sysarch_ppc   = $(filter ppc ppc64,${system_targets})
sysarch_sparc = $(filter sparc sparc64,${system_targets})
sysarch_x86   = $(filter i386 x86_64,${system_targets})
sysarch_s390x = $(filter s390x,${system_targets})
sysarch_misc  = $(filter-out $(foreach s,${sys_systems},${sysarch_$s}),${system_targets})
sysarch_x86-microvm   = $(filter x86_64,${system_targets})

else

systems =

endif # enable_system

ifeq (${enable_linux_user},enable)

# list of linux-user targets, from ./configure
user_targets = \
 i386 x86_64 alpha aarch64 aarch64_be arm armeb cris hppa m68k microblaze microblazeel \
 mips mipsel mips64 mips64el mipsn32 mipsn32el nios2 or1k \
 ppc ppc64 ppc64abi32 ppc64le riscv32 riscv64 sh4 sh4eb sparc sparc64 sparc32plus \
 s390x tilegx xtensa xtensaeb

endif	# enable_linux_user

ifneq ($(filter $(DEB_HOST_ARCH),i386 x32),)
# XXX as of 2020-04-29, i386 buildd fails to link -static-pie executable:
# /usr/bin/ld: /usr/lib/i386-linux-gnu/libc.a(memset_chk-nonshared.o):
#	unsupported non-PIC call to IFUNC `memset'
# so disable PIE for qemu-user-static build on i386 for now.
# On x32 -static-pie fails in different way.
# On amd64 -static-pie appears to work fine.
# On other architectures qemu correctly detect that -static-pie is not available
XXXstaticpie = --disable-pie
else
XXXstaticpie =
endif

b/configure-stamp: configure
	dh_testdir

	for f in ${AUTOGENERATED} ; do \
        sed -e 's%@ARCH@%${DEB_HOST_MULTIARCH}%g' \
	        -e 's%@PKGVERSION@%${PKGVERSION}%g' \
			< debian/$$f.in  > debian/$$f ; \
    done

	# system build
	rm -rf b/qemu; mkdir -p b/qemu
	cd b/qemu && \
	    ../../configure ${common_configure_opts} --disable-user \
		--${enable_system}-system \
		--${enable_linux_user}-linux-user \
		--disable-xen \
		--enable-modules \
		$(shell sh debian/extract-config-opts \
		    $(DEB_HOST_ARCH_OS)-$(DEB_HOST_ARCH) debian/control) \
		$(QEMU_CONFIGURE_OPTIONS) || \
	 { echo ===== CONFIGURE FAILED ===; tail -n 50 b/qemu/config.log; exit 1; }

# switch some simple UI and simple audio modules to be built-ins,
# but keep more complex to be modules to move to a separate package
	sed -i -r 's/(CONFIG_(CURSES|-GTK|-SDL|AUDIO_(-PA|OSS|ALSA|-SDL)))=m/\1=y/' \
		b/qemu/config-host.mak

ifneq ($(filter $(DEB_HOST_ARCH),amd64),)
	# microvm system
	rm -rf b/qemu-microvm; mkdir -p b/qemu-microvm
	cd b/qemu-microvm && \
		../../configure ${common_configure_opts} --disable-user \
		--enable-system --enable-kvm \
		--disable-linux-user --disable-modules --disable-docs \
		--disable-libssh --disable-tcmalloc --disable-glusterfs \
		--disable-seccomp --disable-bzip2 --disable-slirp --disable-vde \
		--disable-netmap --disable-hax --disable-hvf --disable-whpx \
		--disable-cocoa --disable-lzfse \
		--disable-guest-agent --disable-guest-agent-msi --disable-tools \
		--disable-gnutls --disable-gcrypt --disable-auth-pam \
		--disable-replication --disable-vxhs --disable-bochs --disable-cloop \
		--disable-dmg --disable-parallels --disable-qed --disable-vdi \
		--disable-sheepdog --disable-capstone --disable-libpmem --disable-plugins \
		--disable-snappy --disable-lzo --disable-usb-redir \
		--disable-libusb --disable-smartcard --disable-libnfs  \
		--disable-libiscsi --disable-rbd  --disable-spice --disable-attr \
		--disable-cap-ng --disable-linux-aio --disable-brlapi \
		--disable-virglrenderer --disable-vnc-jpeg --disable-vnc-sasl \
		--disable-vnc-png --disable-rdma --disable-pvrdma \
		--disable-fdt --disable-curl --disable-curses --disable-sdl \
		--disable-gtk  --disable-tpm --disable-vte --disable-vnc  \
		--disable-xen --disable-opengl --target-list=x86_64-softmmu \
		--audio-drv-list="" --disable-xfsctl --disable-vvfat \
		--disable-iconv --disable-nettle \
		--disable-tcg-interpreter --disable-tcg \
		--without-default-devices \
		$(QEMU_CONFIGURE_OPTIONS) || \
	 { echo ===== CONFIGURE FAILED ===; tail -n 50 b/qemu-microvm/config.log; exit 1; }
	echo "#define CONFIG_MICROVM_DEFAULT 1" >> b/qemu-microvm/x86_64-softmmu/config-target.h
endif

ifeq ($(VENDOR),UBUNTU)
ifneq ($(filter $(DEB_HOST_ARCH),amd64 i386),)
# like above but with:
#  --enable-xen
#  --disable-linux-user (not needed for this binary)
#  reduced --target-list as needed for xen
#  xen can only be configured on x86, so skip other build architectures
	# system build for qemu-system-x86-xen
	rm -rf b/qemu-xen; mkdir -p b/qemu-xen
	cd b/qemu-xen && \
	    ../../configure ${common_configure_opts} --disable-user \
		--${enable_system}-system \
		--disable-linux-user \
		--enable-xen \
		--target-list="aarch64-softmmu arm-softmmu i386-softmmu x86_64-softmmu"
		--enable-modules \
		$(shell sh debian/extract-config-opts \
		    $(DEB_HOST_ARCH_OS)-$(DEB_HOST_ARCH) debian/control) \
		$(QEMU_CONFIGURE_OPTIONS) || \
	 { echo ===== CONFIGURE FAILED ===; tail -n 50 b/qemu-xen/config.log; exit 1; }
# same config as the main build.
	sed -i -r 's/(CONFIG_(CURSES|-GTK|-SDL|AUDIO_(-PA|OSS|ALSA|-SDL)))=m/\1=y/' \
		b/qemu-xen/config-host.mak
endif
endif

ifeq ($(enable_linux_user),enable)
# do not use debian/configure-opts here, all optional stuff will be enabled
# automatically, dependencies are already verified in the main build
	rm -rf b/user-static; mkdir b/user-static
	cd b/user-static && \
	    ../../configure ${common_configure_opts} \
		--static ${XXXstaticpie} --disable-system --disable-xen \
		--target-list="$(addsuffix -linux-user,${user_targets})"
endif
	touch $@

build-arch: b/build-stamp
b/build-stamp: b/configure-stamp
	dh_testdir

	# system and utils build
	$(MAKE) -C b/qemu V=${V}
ifeq (${enable_system},enable)
	rm -f b/qemu/pc-bios/bamboo.dtb b/qemu/pc-bios/canyonlands.dtb
	dtc -o b/qemu/pc-bios/bamboo.dtb pc-bios/bamboo.dts
	dtc -o b/qemu/pc-bios/canyonlands.dtb pc-bios/canyonlands.dts
endif

ifneq ($(filter $(DEB_HOST_ARCH),amd64),)
	# microvm system
	$(MAKE) -C b/qemu-microvm V=${V}
endif

ifeq ($(VENDOR),UBUNTU)
ifneq ($(filter $(DEB_HOST_ARCH),amd64 i386),)
	$(MAKE) -C b/qemu-xen V=${V}
endif
endif

ifeq ($(enable_linux_user),enable)
	# user-static build
	# we use this invocation to build just the binaries
	$(MAKE) -C b/user-static V=${V} $(patsubst %,%-linux-user/all,${user_targets})
	sed -e 's/qemu\\-user\\-static/qemu\\-user/g' \
	    -e 's/ (static version)//' \
	    debian/qemu-user-static.1 > debian/qemu-user.1
endif
	touch $@

define inst-system
	mkdir -p debian/qemu-system-$1/usr/share/man/man1 debian/qemu-system-$1/usr/bin
	for t in ${sysarch_$1}; do \
	    mv debian/tmp/usr/bin/qemu-system-$$t debian/qemu-system-$1/usr/bin/qemu-system-$$t; \
	    echo ".so man1/qemu-system.1" > debian/qemu-system-$1/usr/share/man/man1/qemu-system-$$t.1; \
	done
	echo sysarch:$1=\
$(if $(wordlist 10,20,${sysarch_$1}),\
$(wordlist 1,8,${sysarch_$1})\$${Newline}   $(wordlist 9,20,${sysarch_$1}),\
${sysarch_$1}) \
> debian/qemu-system-$1.substvars
	echo sysprovides:$1=${addprefix qemu-system-,${filter-out $1,${sysarch_$1}}} | \
	  sed -e 's/ /, /g' -e 'y/_/-/' >> debian/qemu-system-$1.substvars
	dh_link -pqemu-system-$1 usr/share/doc/qemu-system-common usr/share/doc/qemu-system-$1/common

endef

binary-arch:
	dh_testdir
	dh_testroot
	dh_prep -a
	dh_installdirs -a

	# system and utils install
	$(MAKE) -C b/qemu DESTDIR=$(CURDIR)/debian/tmp install \
	  KEYMAPS= ICON_SIZES=

ifeq (${enable_system},enable)

	# qemu-system subpackages
	mv debian/tmp/usr/share/man/man1/qemu.1 debian/tmp/usr/share/man/man1/qemu-system.1
	$(foreach s,${systems},$(call inst-system,$s))

ifeq ($(VENDOR),UBUNTU)
ifneq ($(filter $(DEB_HOST_ARCH),amd64 i386),)
	mkdir -p $(CURDIR)/debian/tmp-xen
	$(MAKE) -C b/qemu-xen DESTDIR=$(CURDIR)/debian/tmp-xen install KEYMAPS=
	$(call inst-system,x86,"-xen")
endif
endif

ifneq ($(filter $(DEB_HOST_ARCH),amd64),)
	# microvm system
	cp b/qemu-microvm/x86_64-softmmu/qemu-system-x86_64 debian/qemu-system-x86/usr/bin/qemu-system-x86_64-microvm
	echo ".so man1/qemu-system.1" > debian/qemu-system-x86/usr/share/man/man1/qemu-system-x86_64-microvm.1
endif

ifeq ($(DEB_HOST_ARCH_OS),linux)

# /usr/bin/kvm compat script.
ifneq ($(filter $(DEB_HOST_ARCH),amd64 i386 x32),)
	install -D -m755 debian/kvm.x86 debian/qemu-kvm/usr/bin/kvm
	install -D -m644 debian/kvm.1 debian/qemu-kvm/usr/share/man/man1/kvm.1
ifeq ($(VENDOR),UBUNTU)
# on ubuntu there was kvm-spice package/binary which was used in libvirt xml
	dh_link -pqemu-kvm usr/bin/kvm usr/bin/kvm-spice \
		usr/bin/qemu-system-x86_64 usr/bin/qemu-system-x86_64-spice
	dh_installmodules -pqemu-system-x86
endif
endif
ifneq ($(filter $(DEB_HOST_ARCH),arm64),)
	install -D -m755 debian/kvm.arm64 debian/qemu-kvm/usr/bin/kvm
endif
ifneq ($(filter $(DEB_HOST_ARCH),armhf armel),)
	install -D -m755 debian/kvm.arm32 debian/qemu-kvm/usr/bin/kvm
endif
ifneq ($(filter $(DEB_HOST_ARCH),ppc64 ppc64el powerpc),)
	install -D -m755 debian/kvm.powerpc debian/qemu-kvm/usr/bin/kvm
endif
ifneq ($(filter $(DEB_HOST_ARCH),s390 s390x),)
	install -D -m755 debian/kvm.s390x debian/qemu-kvm/usr/bin/kvm
endif
ifeq ($(VENDOR),UBUNTU)
# apport hook is ubuntu-specific
	dh_install -pqemu-system-common debian/source_qemu.py \
		usr/share/apport/package-hooks/
endif

# virtfs-proxy-helper and qemu-bridge-helper are linux-specific
	for f in usr/bin/virtfs-proxy-helper \
	         usr/share/man/man1/virtfs-proxy-helper.1 \
		 usr/lib/qemu/qemu-bridge-helper \
	; do \
	  mkdir -p debian/qemu-system-common/$${f%/*} ; \
	  mv debian/tmp/$$f debian/qemu-system-common/$$f ; \
	done

# ui-spice-app is optional (see d/control for spice)
	if [ -f debian/tmp${libdir}/qemu/ui-spice-app.so ]; then \
	  mkdir -p debian/qemu-system-common${libdir}/qemu ; \
	  mv debian/tmp${libdir}/qemu/ui-spice-app.so \
	     debian/qemu-system-common${libdir}/qemu/ ; \
	fi

endif # linux

endif # enable_system

ifeq ($(enable_linux_user),enable)
	dh_movefiles -p qemu-user $(patsubst %,usr/bin/qemu-%,${user_targets})
	dh_link -p qemu-user $(patsubst %,usr/share/man/man1/qemu-user.1 usr/share/man/man1/qemu-%.1,${user_targets})

	# qemu-user-static
	mkdir -p debian/qemu-user-static/usr/bin debian/qemu-user-static/usr/share/man/man1
	for t in ${user_targets}; do \
	   cp -p b/user-static/$$t-linux-user/qemu-$$t \
	       debian/qemu-user-static/usr/bin/qemu-$$t-static ; \
	   ln -s qemu-user-static.1 \
	       debian/qemu-user-static/usr/share/man/man1/qemu-$$t-static.1 ; \
	done

	# binfmt support
	./debian/binfmt-install qemu-user-static
	./debian/binfmt-install qemu-user-binfmt
endif	# enable_linux_user

	dh_install -a
	dh_missing --list-missing
	dh_installdocs -a -Nqemu-user-binfmt
	dh_installchangelogs -a -Nqemu-user-binfmt
	dh_installdocs -a -pqemu-user-binfmt --link-doc=qemu-user
	dh_installman -a
	dh_installudev -a
ifeq (${enable_system},enable)
# qemu-ifup is arch-specific
	install -D debian/qemu-ifup.$(DEB_HOST_ARCH_OS) \
		debian/qemu-system-common/etc/qemu-ifup
endif
	# install /etc/default/qemu-kvm
	dh_installinit -a -pqemu-system-common --name=qemu-kvm
	# install and enable qemu-kvm.service
	dh_installsystemd -a -pqemu-system-common --no-restart-on-upgrade --name=qemu-kvm
	dh_installinit -a -pqemu-guest-agent
	dh_installsystemd -a -pqemu-guest-agent --no-start --no-enable
	dh_link -a
	dh_lintian -a
	dh_strip -a
	dh_compress -a
	dh_fixperms -a
	dh_shlibdeps -a
	dh_installdeb -a
ifeq ($(enable_linux_user),enable)
# after shlibdeps finished, grab ${shlibs:Depends} from -user package
# and transform it into Built-Using field for -user-static.
# See also dpkg-query bug #588505
	if [ -f debian/qemu-user.substvars ]; then \
	  pkgs=$$(sed -n -e's/([^)]*)//g' -e's/,//g' -e's/^shlibs:Depends=//p' debian/qemu-user.substvars); \
	  srcs=; for p in $$pkgs; do \
	    srcs="$$srcs $$(dpkg-query -f '$${source:Package} (= $${source:Version}),' -W $$p)"; \
	  done ; \
	  echo "built-using=$$srcs" >> debian/qemu-user-static.substvars ; \
	fi
endif
	dh_gencontrol -a
	dh_md5sums -a
	dh_builddeb -a

ifneq (,$(wildcard debian/control-in))
# only include rules for debian/control if debian/control-in is present
debian/control: debian/control-in debian/rules
	echo '# autogenerated file, please edit debian/control-in' > $@.tmp
	sed -e 's/^:$(shell echo ${VENDOR} | tr '[A-Z]' '[a-z]')://' \
		-e '/^:[a-z]*:/D' $< >> $@.tmp
	mv -f $@.tmp $@
	chmod -w $@
endif

### openbios rules
b/openbios/config-host.mak:
	mkdir -p b/openbios
	cd b/openbios && ../../roms/openbios/config/scripts/switch-arch builtin-ppc builtin-sparc32 builtin-sparc64
build-openbios: $(addprefix b/openbios/obj-, $(addsuffix /.built, ppc sparc32 sparc64))
b/openbios/obj-%/.built: b/openbios/config-host.mak
	${MAKE} -C ${@D} V=${V} EXTRACFLAGS="-ffreestanding -fno-pic -fno-stack-protector"
	@touch $@
install-openbios: build-openbios
	install -m 0644 b/openbios/obj-ppc/openbios-qemu.elf "${sysdatadir}/openbios-ppc"
	install -m 0644 b/openbios/obj-sparc32/openbios-builtin.elf "${sysdatadir}/openbios-sparc32"
	install -m 0644 b/openbios/obj-sparc64/openbios-builtin.elf "${sysdatadir}/openbios-sparc64"
	install -m 0644 -t "${sysdatadir}" \
		b/openbios/obj-sparc32/QEMU,tcx.bin \
		b/openbios/obj-sparc32/QEMU,cgthree.bin \
		b/openbios/obj-sparc64/QEMU,VGA.bin
sysdata-components += openbios

### powernv firmware in roms/skiboot
build-skiboot: b/skiboot/skiboot.lid
b/skiboot/skiboot.lid:
	mkdir -p b/skiboot
	${MAKE} -C b/skiboot -f ${CURDIR}/roms/skiboot/Makefile \
	  SRC=${CURDIR}/roms/skiboot \
	  CROSS_COMPILE=${PPC64_CROSSPFX} V=${V}
install-skiboot: b/skiboot/skiboot.lid
	install -m 0644 -t "${sysdatadir}" $<
sysdata-components += skiboot

### x86 optionrom
build-x86-optionrom: b/optionrom/built
b/optionrom/built:
	mkdir -p b/optionrom
	${MAKE) -f ${CURDIR}/debian/optionrom.mak -C b/optionrom SRC_PATH="${CURDIR}" all
	touch $@
install-x86-optionrom: build-x86-optionrom b/install-indep-prep.stamp | ${sysdatadir}
	${MAKE} -f ${CURDIR}/debian/optionrom.mak -C b/optionrom SRC_PATH="${CURDIR}" install DESTDIR="${CURDIR}/${sysdatadir}"
sysdata-components += x86-optionrom

### sgabios.
# The Makefile is too complex and forces current date to be embedded to binary
build-sgabios: b/sgabios/sgabios.bin
b/sgabios/sgabios.bin:
	mkdir -p b/sgabios
	cc -c -o b/sgabios/sgabios.o roms/sgabios/sgabios.S -Wall -Os -m32 -nostdlib \
	  -DBUILD_DATE="\"$$(LC_ALL=C date -u -r roms/sgabios/sgabios.S)\"" \
	  -DBUILD_SHORT_DATE="\"$$(date -u +%D -r roms/sgabios/sgabios.S)\"" \
	  -DBUILD_HOST=\"debian\" -DBUILD_USER=\"build\"
	ld -T roms/sgabios/rom16.ld -nostdlib b/sgabios/sgabios.o -o b/sgabios/sgabios.elf
	objcopy -O binary b/sgabios/sgabios.elf b/sgabios/sgabios.bin
	cc -Wall -O2 -o b/sgabios/csum8 roms/sgabios/csum8.c
	b/sgabios/csum8 b/sgabios/sgabios.bin
install-sgabios: b/sgabios/sgabios.bin
	install -m 0644 $< ${sysdatadir}/sgabios.bin
sysdata-components += sgabios

### qboot, aka bios-microvm
build-qboot: b/qboot/bios.bin
b/qboot/bios.bin:
	cp -al roms/qboot b/
	${MAKE} -C ${CURDIR}/b/qboot
install-qboot: b/qboot/bios.bin
	install -m 0644 $< ${sysdatadir}/bios-microvm.bin
sysdata-components += qboot

### alpha firmware in roms/palcode-clipper
build-palcode-clipper: b/qemu-palcode/palcode-clipper
b/qemu-palcode/palcode-clipper:
	cp -al roms/qemu-palcode b/
	${MAKE} -C ${CURDIR}/b/qemu-palcode CROSS=${ALPHAEV67_CROSSPFX}
	${ALPHAEV67_CROSSPFX}strip b/qemu-palcode/palcode-clipper
install-palcode-clipper: b/qemu-palcode/palcode-clipper
	install -m 0644 $< ${sysdatadir}/palcode-clipper
sysdata-components += palcode-clipper

### SLOF
build-slof: b/SLOF/boot_rom.bin
b/SLOF/boot_rom.bin:
	cp -al roms/SLOF b/
	env -u LDFLAGS -u CFLAGS $(MAKE) -C b/SLOF qemu CROSS="powerpc64-linux-gnu-" V=${V}
install-slof: b/SLOF/boot_rom.bin
	install -m 0644 $< ${sysdatadir}/slof.bin
sysdata-components += slof

### s390x firmware in pc-bios/s390-ccw
build-s390x-fw: b/s390fw/built
b/s390fw/built:
	mkdir -p b/s390fw
	${MAKE} -f debian/s390fw.mak OUT=b/s390fw/
	touch $@
install-s390x-fw: build-s390x-fw
	install -m 0644 -t "${sysdatadir}" b/s390fw/s390*.img
sysdata-components += s390x-fw

### hppa-firmware (roms/seabios-hppa)
build-hppa-fw: b/hppafw/hppa-firmware.img
b/hppafw/hppa-firmware.img: | b
	mkdir -p b/hppafw
	${MAKE} -C roms/seabios-hppa OUT=../../b/hppafw/ PYTHON=python3 parisc
	hppa-linux-gnu-strip -R.note -R.comment $@
install-hppa-fw: b/hppafw/hppa-firmware.img
	install -m 0644 $< ${sysdatadir}
sysdata-components += hppa-fw

### opensbi (riscv firmware)
# we only build v64 variants, not v32
build-opensbi: b/opensbi/.built
b/opensbi/.built: | b
	mkdir -p b/opensbi
	${MAKE} -C roms/opensbi O=../../b/opensbi CROSS_COMPILE=riscv64-linux-gnu- V=${V} PLATFORM=qemu/virt
	${MAKE} -C roms/opensbi O=../../b/opensbi CROSS_COMPILE=riscv64-linux-gnu- V=${V} PLATFORM=sifive/fu540
	touch $@
install-opensbi: build-opensbi
	install -m 0644 b/opensbi/platform/qemu/virt/firmware/fw_jump.bin ${sysdatadir}/opensbi-riscv64-virt-fw_jump.bin
	install -m 0644 b/opensbi/platform/sifive/fu540/firmware/fw_jump.bin ${sysdatadir}/opensbi-riscv64-sifive_u-fw_jump.bin
sysdata-components += opensbi

build-indep: $(addprefix build-, ${sysdata-components})

b/install-indep-prep.stamp:
	dh_testdir
	dh_testroot
	dh_prep -i -Xdebian/tmp
	touch $@

${sysdatadir}:
	mkdir -p -m 0755 $@
b:
	mkdir -p $@

.PHONY: $(addprefix build-  , ${sysdata-components})
.PHONY: $(addprefix install-, ${sysdata-components})
$(addprefix build-  , ${sysdata-components}): | b
$(addprefix install-, ${sysdata-components}): b/install-indep-prep.stamp | ${sysdatadir}

binary-indep: b/install-indep-prep.stamp \
	        $(addprefix install-, ${sysdata-components}) \
		| ${sysdatadir}
	dh_install -i
	rm -f debian/qemu-system-data/usr/share/qemu/keymaps/Makefile
	dh_installdocs -i
	dh_installchangelogs -i
	dh_lintian -i
	dh_compress -i
	dh_fixperms -i
	dh_installdeb -i
	dh_gencontrol -i
	dh_md5sums -i
	dh_builddeb -i

build: build-arch build-indep
binary: binary-arch binary-indep

clean:	debian/control
	dh_testdir
	rm -rf b
	find scripts/ -name '*.pyc' -delete || :
	rm -f debian/qemu-user.1
	rm -f $(patsubst %, debian/%, ${AUTOGENERATED})
	dh_clean

.PHONY: build clean binary-arch binary-indep binary build-arch build-indep build

get-orig-source:
	./debian/get-orig-source.sh ${DEB_VERSION}

.PHONY: get-orig-source

