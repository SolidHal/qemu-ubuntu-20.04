.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "QEMU 1"
.TH QEMU 1 "2004-05-08" " " " "
.SH "NAME"
qemu  \- QEMU System Emulator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
usage: qemu [options] [disk_image]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1QEMU\s0 System emulator simulates a complete \s-1PC\s0.
.PP
In order to meet specific user needs, two versions of \s-1QEMU\s0 are
available:
.IP "1." 4
\&\f(CW\*(C`qemu\-fast\*(C'\fR uses the host Memory Management Unit (\s-1MMU\s0) to simulate 
the x86 \s-1MMU\s0. It is \fIfast\fR but has limitations because the whole 4 \s-1GB\s0
address space cannot be used and some memory mapped peripherials
cannot be emulated accurately yet. Therefore, a specific Linux kernel
must be used 
.IP "2." 4
\&\f(CW\*(C`qemu\*(C'\fR uses a software \s-1MMU\s0. It is about \fItwo times 
slower\fR but gives a more accurate emulation. 
.PP
\&\s-1QEMU\s0 emulates the following \s-1PC\s0 peripherials:
.IP "\-" 4
\&\s-1VGA\s0 (hardware level, including all non standard modes)
.IP "\-" 4
\&\s-1PS/2\s0 mouse and keyboard
.IP "\-" 4
2 \s-1IDE\s0 interfaces with hard disk and CD-ROM support
.IP "\-" 4
Floppy disk
.IP "\-" 4
up to 6 \s-1NE2000\s0 network adapters
.IP "\-" 4
Serial port
.IP "\-" 4
Soundblaster 16 card
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fIdisk_image\fR is a raw hard disk image for \s-1IDE\s0 hard disk 0.
.PP
General options:
.IP "\fB\-fda file\fR" 4
.IX Item "-fda file"
.PD 0
.IP "\fB\-fdb file\fR" 4
.IX Item "-fdb file"
.PD
Use \fIfile\fR as floppy disk 0/1 image 
.IP "\fB\-hda file\fR" 4
.IX Item "-hda file"
.PD 0
.IP "\fB\-hdb file\fR" 4
.IX Item "-hdb file"
.IP "\fB\-hdc file\fR" 4
.IX Item "-hdc file"
.IP "\fB\-hdd file\fR" 4
.IX Item "-hdd file"
.PD
Use \fIfile\fR as hard disk 0, 1, 2 or 3 image 
.IP "\fB\-cdrom file\fR" 4
.IX Item "-cdrom file"
Use \fIfile\fR as CD-ROM image (you cannot use \fB\-hdc\fR and and
\&\fB\-cdrom\fR at the same time).
.IP "\fB\-boot [a|c|d]\fR" 4
.IX Item "-boot [a|c|d]"
Boot on floppy (a), hard disk (c) or CD-ROM (d). Hard disk boot is
the default.
.IP "\fB\-snapshot\fR" 4
.IX Item "-snapshot"
Write to temporary files instead of disk image files. In this case,
the raw disk image you use is not written back. You can however force
the write back by pressing \fBC\-a s\fR  
.IP "\fB\-m megs\fR" 4
.IX Item "-m megs"
Set virtual \s-1RAM\s0 size to \fImegs\fR megabytes.
.IP "\fB\-initrd file\fR" 4
.IX Item "-initrd file"
Use \fIfile\fR as initial ram disk.
.IP "\fB\-nographic\fR" 4
.IX Item "-nographic"
Normally, \s-1QEMU\s0 uses \s-1SDL\s0 to display the \s-1VGA\s0 output. With this option,
you can totally disable graphical output so that \s-1QEMU\s0 is a simple
command line application. The emulated serial port is redirected on
the console. Therefore, you can still use \s-1QEMU\s0 to debug a Linux kernel
with a serial console.
.IP "\fB\-enable\-audio\fR" 4
.IX Item "-enable-audio"
The \s-1SB16\s0 emulation is disabled by default as it may give problems with
Windows. You can enable it manually with this option.
.PP
Network options:
.IP "\fB\-n script\fR" 4
.IX Item "-n script"
Set \s-1TUN/TAP\s0 network init script [default=/etc/qemu\-ifup]. This script
is launched to configure the host network interface (usually tun0)
corresponding to the virtual \s-1NE2000\s0 card.
.IP "\fB\-macaddr addr\fR" 4
.IX Item "-macaddr addr"
Set the mac address of the first interface (the format is
aa:bb:cc:dd:ee:ff in hexa). The mac address is incremented for each
new network interface.
.IP "\fB\-tun\-fd fd\fR" 4
.IX Item "-tun-fd fd"
Assumes \fIfd\fR talks to a tap/tun host network interface and use
it. Read <\fBhttp://bellard.org/qemu/tetrinet.html\fR> to have an
example of its use.
.IP "\fB\-user\-net\fR" 4
.IX Item "-user-net"
(Experimental) Use the user mode network stack. This is the default if
no tun/tap network init script is found.
.IP "\fB\-dummy\-net\fR" 4
.IX Item "-dummy-net"
Use the dummy network stack: no packet will be received on the network
cards.
.PP
Linux boot specific. When using this options, you can use a given
Linux kernel without installing it in the disk image. It can be useful
for easier testing of various kernels.
.IP "\fB\-kernel bzImage\fR" 4
.IX Item "-kernel bzImage"
Use \fIbzImage\fR as kernel image.
.IP "\fB\-append cmdline\fR" 4
.IX Item "-append cmdline"
Use \fIcmdline\fR as kernel command line
.IP "\fB\-initrd file\fR" 4
.IX Item "-initrd file"
Use \fIfile\fR as initial ram disk.
.PP
Debug options:
.IP "\fB\-s\fR" 4
.IX Item "-s"
Wait gdb connection to port 1234  
.IP "\fB\-p port\fR" 4
.IX Item "-p port"
Change gdb connection port.
.IP "\fB\-S\fR" 4
.IX Item "-S"
Do not start \s-1CPU\s0 at startup (you must type 'c' in the monitor).
.IP "\fB\-d\fR" 4
.IX Item "-d"
Output log in /tmp/qemu.log
.PP
During the graphical emulation, you can use the following keys:
.IP "\fBCtrl+Shift\fR" 4
.IX Item "Ctrl+Shift"
Toggle mouse and keyboard grab.
.IP "\fBCtrl+Shift\-f\fR" 4
.IX Item "Ctrl+Shift-f"
Toggle full screen
.PP
During emulation, if you are using the serial console, use \fBC\-a h\fR
to get terminal commands:
.IP "\fBCtrl-a h\fR" 4
.IX Item "Ctrl-a h"
Print this help
.IP "\fBCtrl-a x\fR" 4
.IX Item "Ctrl-a x"
Exit emulatior
.IP "\fBCtrl-a s\fR" 4
.IX Item "Ctrl-a s"
Save disk data back to file (if \-snapshot)
.IP "\fBCtrl-a b\fR" 4
.IX Item "Ctrl-a b"
Send break (magic sysrq in Linux)
.IP "\fBCtrl-a c\fR" 4
.IX Item "Ctrl-a c"
Switch between console and monitor
.IP "\fBCtrl-a Ctrl-a\fR" 4
.IX Item "Ctrl-a Ctrl-a"
Send Ctrl-a
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \s-1HTML\s0 documentation of \s-1QEMU\s0 for more precise information and Linux
user mode emulator invocation.
.SH "AUTHOR"
.IX Header "AUTHOR"
Fabrice Bellard
